{"version":3,"sources":["js/components/ImagesLayout.js","App.js","serviceWorker.js","index.js"],"names":["ImagesLayout","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomizeProp","maxXPos","window","innerWidth","maxYPos","Math","round","innerHeight","x","randomNumber","y","width","min","max","random","animateIntro","state","imgAppear","_this2","images","react_default","a","createElement","className","keys","map","svg","react_transition_group","in","appear","timeout","classNames","key","src","alt","React","Component","App","playSound","e","type","keyCode","target","dataset","code","btn","document","querySelector","concat","audio","classList","add","currentTime","play","sounds","appearBtn","fetch","then","response","json","data","setState","addEventListener","_this3","_this$state","sound","data-code","onMouseDown","onTransitionEnd","remove","kbd","components_ImagesLayout","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.403f5ffb.chunk.js","sourcesContent":["import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nclass ImagesLayout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imgAppear: true\n    }\n  }\n\n  randomizeProp = () => {\n    const min = 0;\n    const minWidth = 25;\n    const maxWidth = 195;\n    let maxXPos = window.innerWidth;\n    let maxYPos = Math.round(window.innerHeight / 5);\n    \n    const randomXPos = this.randomNumber(min, maxXPos);\n    const randomYPos = this.randomNumber(min, maxYPos);\n    const width = this.randomNumber(minWidth, maxWidth);\n\n    return {\n      x: randomXPos,\n      y: randomYPos,\n      width: width\n    }\n  }\n\n  randomNumber = (min, max) => {\n    return Math.round(Math.random() * (max - min) + min);\n  }\n\n  animateIntro = () => {\n    \n  }\n\n  render() {\n    const { images } = this.props;\n\n    return(\n      <div className='images-layout'>\n        {Object.keys(images).map(svg => \n          <CSSTransition\n            in={this.state.imgAppear}\n            appear={true}\n            timeout={300}\n            classNames='fade'\n            key={svg}\n          >\n            <img \n              className={'img ' + svg} \n              src={images[svg]} \n              alt={svg}\n            />\n          </CSSTransition>\n        )}\n      </div>\n    )\n  }\n}\n\n// style={{\n//   top: svg !== 'city' && this.randomizeProp().y,\n//   left: svg !== 'city' && this.randomizeProp().x,\n//   width: svg !== 'city' && this.randomizeProp().width\n// }} \n\nexport default ImagesLayout;\n","import React from 'react';\nimport ImagesLayout from './js/components/ImagesLayout';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sounds: {},\n      images: {},\n      appearBtn: true\n    };\n  } \n\n  componentDidMount() {\n    fetch('http://localhost:3000/json/data.json') \n      .then(response => response.json())\n      .then(data => this.setState({sounds: data.sounds, images: data.svg}));\n\n    window.addEventListener('keydown', this.playSound);\n  }\n\n  playSound = (e) => {\n    const key = e.type === 'keydown' ? e.keyCode : e.target.dataset.code;\n    const btn = document.querySelector(`.kbd[data-code=\"${key}\"]`);\n    const audio = document.querySelector(`audio[data-code=\"${key}\"]`);\n\n    if (!audio) return;\n\n    btn.classList.add('pressed');\n    audio.currentTime = 0;\n    audio.play();\n  }\n\n  render() {\n    const { sounds, images, appearBtn } = this.state;\n\n    return (\n      <div className=\"App\" >\n        <div className='main-screen'>\n          <div className=\"keys\">\n            {Object.keys(sounds).map(sound => ( \n              <CSSTransition\n                in={appearBtn}\n                appear={true}\n                timeout={300}\n                classNames='fade'\n                key={sound}\n              >\n                <div className=\"key\">\n                  <kbd \n                    className=\"kbd\" \n                    data-code={sounds[sound].code} \n                    onMouseDown={this.playSound}\n                    onTransitionEnd={e => e.target.classList.remove('pressed')}\n                  >\n                    {sounds[sound].kbd}\n                  </kbd>\n                  <span className=\"sound\">{sound}</span>\n                </div>\n              </CSSTransition>\n            ))}\n          </div>\n        </div>\n\n        <ImagesLayout images={images}/>\n\n        {Object.keys(sounds).map(sound => \n          <audio \n            data-code={sounds[sound].code}\n            src={sounds[sound].src} \n            key={sound}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}